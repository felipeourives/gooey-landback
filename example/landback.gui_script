local landback_ui = require "gooey-landback.landback"
local utils = require "gooey.themes.utils"

local timers = {}
local timer_props = {}
timer_props.timer_counter = 0

local function create_timer_node(node, id, i, y, shake)
	local x = timer_props.node_pos.x + timer_props.node_size.x * (i -1) * 1.8
	local new_node = gui.clone(node)

	local pos = vmath.vector3(0)
	pos.y = y
	pos.x = x

	gui.set_position(new_node, pos)
	table.insert(timers[id], new_node)

	if shake == true then
		utils.shake(new_node, vmath.vector3(1))
	end
end

local function set_timer(node, id, element_count, seconds, fn)

	local timer_obj = timers[id]

	if timer_props.node_size == nil then
		timer_props.node_size = gui.get_size(node)
	end

	if timer_props.node_pos == nil then
		timer_props.node_pos = gui.get_position(node)
	end

	gui.set_enabled(node, true)

	if timer_obj ~= nil then

		if element_count < #timer_obj then
			for i = #timer_obj, #timer_obj - (#timer_obj - element_count) + 1, -1 do
				timer.delay(#timer_obj - i, false, function()
					utils.shake(timer_obj[i], vmath.vector3(1))
					timer.delay(0.7, false, function()
						gui.delete_node(timer_obj[i])
						table.remove(timer_obj, i);
					end)
				end)
			end
		elseif element_count > #timer_obj then
			local y = gui.get_position(timer_obj[1]).y
			for i = #timer_obj, element_count do
				create_timer_node(node, id, i, y, true)
			end
		end
	end

	if timer_obj == nil then
		timers[id] = {}

		local y = timer_props.node_pos.y + timer_props.node_size.y * timer_props.timer_counter * 2.5

		for i = 1, element_count do
			create_timer_node(node, id, i, y)
		end

		timer_props.timer_counter = timer_props.timer_counter + 1
	end

	if element_count > 0 then
		timer.delay(seconds, false, function () 
			set_timer(node, id, element_count - 1, seconds, fn)
		end)
	elseif fn ~= nil then
		fn()
	end

	gui.set_enabled(node, false)
end

function init(self)
	landback_ui.acquire_input()

	self.counter = 0

	set_timer(gui.get_node("timer_element"), "timer", 5, 10)
	set_timer(gui.get_node("timer_element"), "timer2", 5, 10)
	set_timer(gui.get_node("timer_element"), "timer", 0, 10)
	set_timer(gui.get_node("timer_element"), "timer2", 6, 10)
	
	local group = landback_ui.group("group1", function()
		landback_ui.init()
		landback_ui.button("button2", "button_1")
		landback_ui.button("button1", "button_1")
		landback_ui.checkbox("checkbox").set_checked(true)
		landback_ui.radio("radio1")
		landback_ui.radio("radio2").set_selected(true)
		landback_ui.radio("radio3")
		landback_ui.input("input", gui.KEYBOARD_TYPE_DEFAULT, nil, nil, { empty_text = "EMPTY, MAX 8 CHARS"})
		landback_ui.input("input_alphanumeric", gui.KEYBOARD_TYPE_DEFAULT, nil, nil, { empty_text = "ALPHA NUMERIC CHARS" })

		self.list_data = { "Sherlock", "Poirot", "Magnum", "Miss Marple", "Morse", "Columbo" }
		landback_ui.dynamic_list("dynamiclist", "dynamicscrollbar", self.list_data)

		self.tabs = { { id = "tab1", label = "Tab 1", content_id = "content1" }, { id = "tab2", label = "Tab 2", content_id = "content2" } }
		landback_ui.model_tabs("model-head", self.tabs)

		landback_ui.button("tab1_button", "button_2")
		landback_ui.button("tab1_button1", "button_2")
		landback_ui.button("tab1_button2", "button_2")

		landback_ui.scrollbar("dynamicscrollbar")

		landback_ui.loading("loading", 50,  vmath.vector4(1.,0.91,0.549, 1))
	end)
end

function on_input(self, action_id, action)

	action.x = action.x or 0
	action.y = action.y or 0

	local group = landback_ui.group("group1", function()

		landback_ui.button("button2", "button_1", action_id, action, function(button)
			if button.long_pressed then
				print("Button was long pressed")
			else
				print("Button was pressed")
			end
		end)

		landback_ui.button("button1", "button_1", action_id, action, function(button)
			if button.long_pressed then
				print("Button was long pressed")
			else
				print("Button was pressed")
			end
		end)
		
		landback_ui.checkbox("checkbox", action_id, action, function(checkbox)
			print("checkbox", checkbox.checked)
		end)

		landback_ui.radiogroup("radiogroup", action_id, action, function(group_id, action_id, action)
			landback_ui.radio("radio1", group_id, action_id, action, function(radio)
				print("radio 1", radio.selected)
			end)
			landback_ui.radio("radio2", group_id, action_id, action, function(radio)
				print("radio 2", radio.selected)
			end)
			landback_ui.radio("radio3", group_id, action_id, action, function(radio)
				print("radio 3", radio.selected)
			end)
		end)

		landback_ui.input("input", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = "EMPTY, MAX 8 CHARS", max_length = 8 })
		landback_ui.input("input_alphanumeric", gui.KEYBOARD_TYPE_DEFAULT, action_id, action, { empty_text = "ALPHA NUMERIC CHARS", allowed_characters = "[%a%d%s]", use_marked_text = false})
		
		landback_ui.dynamic_list("dynamiclist", "dynamicscrollbar", self.list_data, action_id, action, nil, function(list)
			print("selected item", list.selected_item.index, list.data[list.selected_item.index])
		end)

		landback_ui.model_tabs("model-head", self.tabs, action_id, action, nil, function(list)
			print("selected tab", list.selected_item.index, list.data[list.selected_item.index])
		end)

		if gui.is_enabled(gui.get_node("content1")) then
			landback_ui.button("tab1_button", "button_2", action_id, action)
			landback_ui.button("tab1_button1", "button_2", action_id, action)
			landback_ui.button("tab1_button2", "button_2", action_id, action)
		else
			landback_ui.button("tab2_button", "button_2", action_id, action)
		end

		landback_ui.button("add", "button_2", action_id, action, function(button)
			self.counter = self.counter + 1
			gui.set_text(gui.get_node("number/label"), self.counter)
		end)

		landback_ui.button("sub", "button_2", action_id, action, function(button)
			self.counter = self.counter - 1
			gui.set_text(gui.get_node("number/label"), self.counter)
		end)


		landback_ui.loading("loading", 50,  vmath.vector4(1.,0.91,0.549, 1))
	end)

	if action_id == hash("top") and action.released then
		landback_ui.previous_field()
	end

	if action_id == hash("down") and action.released then
		landback_ui.next_field()
	end

	if action_id == hash("enter") and action.released then
		landback_ui.focused_field_enter()
	end

	return group.consumed
end
